{
	"info": {
		"_postman_id": "d4a20299-a5b5-4226-b975-717566dd52f8",
		"name": "CRUD Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15306231"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"This request is not listed in Swagger, https://reqres.in/api/register is described as\r",
							"request for creating the user, but alows only defined users.\r",
							"This request does not save new records in the DB\r",
							"*/\r",
							"\r",
							"var id=pm.response.json().id;\r",
							"pm.collectionVariables.set(\"newUserId\", id);\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Body matches requst\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('\"email\":\"apple.red@mail.com\",\"password\":\"Password123\",\"first_name\":\"Apple\",\"last_name\":\"Red\",\"username\":\"RedApple\"');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{newUserPassword}}\",\r\n    \"first_name\": \"Apple\",\r\n    \"last_name\": \"Red\",\r\n    \"username\": \"{{newUserUsername}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login new user*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json().token;\r",
							"pm.collectionVariables.set(\"newUserToken\", token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{newUserPassword}}\",\r\n    \"email\": \"{{newUserEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register new user*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token=pm.response.json().token;\r",
							"pm.collectionVariables.set(\"newUserToken\", token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{newUserPassword}}\",\r\n    \"email\": \"{{newUserEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get created user*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var userId = pm.variables.get(\"newUserId\");\r",
							"\r",
							"pm.test(\"Correct user id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(userId);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-length": true,
					"content-type": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{newUserToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{newUserId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete created user*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{newUserToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{newUserId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get created user* - user deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{newUserToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{newUserId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json().data;\r",
							"var listSize = pm.response.json().total;\r",
							"\r",
							"pm.test('Number of users = ' + data.length, function () {\r",
							"    pm.expect(data.length).to.equal(listSize);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{newUserToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users?page=&per_page=30",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": ""
						},
						{
							"key": "per_page",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of users - pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var pageNumber = pm.response.json().page;\r",
							"var data = pm.response.json().data;\r",
							"var listSize = pm.response.json().per_page;\r",
							"\r",
							"pm.test(\"Page number is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"pm.test('Number of users = ' + data.length, function () {\r",
							"    pm.expect(data.length).to.equal(listSize);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{newUserToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users?page=2&per_page=3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "per_page",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - BadRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"There are diferences between https://reqres.in/ page and Swagger on the page is documented that for the body are only needed email and password, but in Swagger stands that there is also need to insert an username in the request body *(there is no request that returns users username, only first_name, last_name,email\r",
							"*/\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Body matches string <Only defined users succeed registration>\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Only defined users succeed registration\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"apple.holt@reqres.in\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - missing password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Body matches string <Missing password>\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - wrong password *BUG*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful POST request\", function () {\r",
							"    pm.expect(pm.response.code).not.to.be.oneOf([200,201, 202]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token=pm.response.json().token;\r",
							"var id=pm.response.json().id;\r",
							"\r",
							"pm.environment.set(\"token\", token);\r",
							"pm.environment.set(\"id\", id);\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token=pm.response.json().token;\r",
							"pm.environment.set(\"token\", token);\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - BadRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"There are diferences between https://reqres.in/ page and Swagger. On the page is documented that for the body are only needed email and password, but in Swagger stands that there is also need to insert an username in the request body *(there is no request that returns users username, only first_name, last_name,email\r",
							"*/\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Body matches string <Only defined users succeed registration>\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"user not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"apple.holt@reqres.in\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - missing password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Body matches string <Missing password>\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - wrong password *BUG*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful POST request\", function () {\r",
							"    pm.expect(pm.response.code).not.to.be.oneOf([200,201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get registred user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var userId = pm.variables.get(\"id\");\r",
							"\r",
							"pm.test(\"Correct user id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(userId);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update registred user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Valid email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(\"test@email.com\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test@email.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get registred user - updated email *BUG*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"User is not updated\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Valid email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(\"test@email.com\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update registred user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Valid email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.eql(\"Anne\");\r",
							"    pm.expect(jsonData.last_name).to.eql(\"Love\");\r",
							"    pm.expect(jsonData.email).to.eql(\"apple.red@mail.com\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"Anne\",\r\n    \"last_name\": \"Love\",\r\n    \"email\": \"{{newUserEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get registred user - updated data *BUG*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"User is not updated\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Valid email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(\"test@email.com\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete registred user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get registred user - deleted user *BUG*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"User is not deleted\r",
							"*/\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/users/{{id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "newUserEmail",
			"value": "apple.red@mail.com"
		},
		{
			"key": "newUserPassword",
			"value": "Password123"
		},
		{
			"key": "userEmail",
			"value": "apple.red@mail.com"
		},
		{
			"key": "newUserUsername",
			"value": "RedApple"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "newUserToken",
			"value": ""
		},
		{
			"key": "newUserId",
			"value": ""
		}
	]
}